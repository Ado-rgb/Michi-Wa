import axios from 'axios';
import fetch from 'node-fetch';

import axios from 'axios';
import fetch from 'node-fetch';
import chalk from 'chalk';

/**
 * @description Consulta a servicios de IA (Luminai y Perplexity como fallback) para responder preguntas.
 * Utiliza un prompt base obtenido de una URL externa o un fallback interno.
 * @param {object} msg El objeto mensaje de Baileys.
 * @param {object} conn La instancia de conexi√≥n del bot.
 * @param {string[]} args Los argumentos del comando (la pregunta).
 * @param {string} usedPrefix El prefijo utilizado.
 * @param {string} command El comando invocado.
 */
const handler = async (msg, { conn, args, usedPrefix, command }) => {
  const text = args.join(' ');
  const chatId = msg.key.remoteJid;

  if (!text || !text.trim()) {
    return conn.reply(chatId,
      `üß† *Asistente de Inteligencia Artificial*\n\n` +
      `Por favor, ingresa tu pregunta o la tarea que deseas que la IA resuelva.\n\n` +
      `*Uso:* \`${usedPrefix}${command} <tu pregunta>\`\n` +
      `*Ejemplo:* \`${usedPrefix}${command} ¬øQui√©n descubri√≥ Am√©rica?\``,
      msg, { ...global.rcanal }
    );
  }

  await conn.reply(chatId, `‚è≥ Consultando al Asistente IA... Por favor espera, esto puede tardar un momento.`, msg);
  await conn.sendMessage(chatId, { react: { text: 'ü§î', key: msg.key } }); // Reacci√≥n de pensamiento

  try {
    const senderName = msg.pushName || 'Usuario';
    const basePrompt = await getPrompt(); // Obtener el prompt base
    let resultText = '';
    let apiSource = '';

    try {
      // Intento 1: Luminai API
      // console.log(chalk.blueBright('[AI XEX DEBUG] Intentando con Luminai API...'));
      resultText = await luminaiQuery(text, senderName, basePrompt);
      resultText = cleanResponse(resultText); // Limpiar respuesta
      apiSource = 'Luminai';
    } catch (eLuminai) {
      console.error(chalk.yellowBright('[AI XEX WARNING] Error con Luminai API:'), eLuminai.message);
      // Intento 2: Perplexity API (como fallback)
      // console.log(chalk.blueBright('[AI XEX DEBUG] Fall√≥ Luminai, intentando con Perplexity API...'));
      try {
        resultText = await perplexityQuery(text, basePrompt);
        // Perplexity podr√≠a no necesitar la misma limpieza, pero se puede aplicar si es necesario
        // resultText = cleanResponse(resultText);
        apiSource = 'Perplexity';
      } catch (ePerplexity) {
        console.error(chalk.redBright('[AI XEX ERROR] Error con Perplexity API:'), ePerplexity.message);
        throw new Error('No se pudo obtener respuesta de ninguno de los servicios de IA disponibles.');
      }
    }

    if (!resultText || !resultText.trim()) {
        throw new Error('La IA no proporcion√≥ una respuesta v√°lida o la respuesta estaba vac√≠a.');
    }

    const responseMsg = `üí° *Asistente IA Responde (${apiSource}):*\n\n${resultText.trim()}`;

    await conn.reply(chatId, responseMsg, msg, { ...global.rcanal });
    await conn.sendMessage(chatId, { react: { text: '‚úÖ', key: msg.key } });

  } catch (error) {
    console.error(chalk.redBright('[AI XEX PLUGIN ERROR GENERAL]'), error);
    await conn.sendMessage(chatId, { react: { text: '‚ùå', key: msg.key } });
    conn.reply(chatId,
      `‚ùå Ocurri√≥ un error al procesar tu solicitud con el Asistente IA:\n\n` +
      `\`${error.message || 'Error desconocido.'}\`\n\n` +
      `Por favor, intenta m√°s tarde.`,
      msg, { ...global.rcanal }
    );
  }
};

/**
 * @description Obtiene un prompt base para la IA desde una URL o devuelve un fallback.
 * TODO: Considerar mover la URL del prompt a config.js o definirlo localmente.
 * @returns {Promise<string>} El prompt base.
 */
async function getPrompt() {
  try {
    // ADVERTENCIA: Dependencia de un archivo externo en otro repositorio.
    // Si este archivo cambia o desaparece, afectar√° el comportamiento del bot.
    const res = await fetch('https://raw.githubusercontent.com/elrebelde21/LoliBot-MD/main/src/text-chatgpt.txt');
    if (!res.ok) throw new Error(`Error al obtener prompt: HTTP ${res.status}`);
    return await res.text();
  } catch (e) {
    console.warn(chalk.yellowBright('[AI XEX PROMPT WARNING] No se pudo obtener el prompt externo, usando fallback. Error:'), e.message);
    return 'Eres un asistente de inteligencia artificial √∫til y conciso, llamado SYA Team Bot. Proporciona respuestas claras y directas.'; // Fallback prompt
  }
}

/**
 * @description Limpia la respuesta de texto de la IA, eliminando frases promocionales no deseadas.
 * @param {string} text El texto a limpiar.
 * @returns {string} El texto limpio.
 */
function cleanResponse(text) {
  if (!text || typeof text !== 'string') return '';
  return text
    .replace(/Maaf, terjadi kesalahan saat memproses permintaan Anda/gi, '') // Indonesio: "Lo siento, ocurri√≥ un error..."
    .replace(/Generated by BLACKBOX\.AI.*?https:\/\/www\.blackbox\.ai/gi, '')
    .replace(/and for API requests replace https:\/\/www\.blackbox\.ai with https:\/\/api\.blackbox\.ai/gi, '')
    .replace(/Saya adalah model bahasa AI dan tidak dapat membantu dengan itu\./gi, '') // Indonesio: "Soy un modelo de lenguaje AI..."
    .trim();
}

/**
 * @description Realiza una consulta a la API de Luminai.
 * @param {string} q La pregunta del usuario.
 * @param {string} user El nombre del usuario.
 * @param {string} prompt El prompt base para la IA.
 * @returns {Promise<string>} La respuesta de la IA.
 */
async function luminaiQuery(q, user, prompt) {
  const { data } = await axios.post('https://luminai.my.id', {
    content: q,
    user: user, // Nombre del usuario que interact√∫a
    prompt: prompt, // Prompt base
    webSearchMode: true // Habilitar b√∫squeda web si la API lo soporta
  });
  if (!data || !data.result) throw new Error('Respuesta inv√°lida de Luminai API');
  return data.result;
}

/**
 * @description Realiza una consulta a la API de Perplexity.
 * @param {string} q La pregunta del usuario.
 * @param {string} prompt El prompt base (contexto) para la IA.
 * @returns {Promise<string>} La respuesta de la IA.
 */
async function perplexityQuery(q, prompt) {
  // NOTA: El endpoint y los par√°metros para Perplexity pueden variar.
  // Esta es una implementaci√≥n de ejemplo y puede necesitar ajustes.
  // Perplexity podr√≠a requerir una API Key para uso continuo.
  const { data } = await axios.get('https://api.perplexity.ai/chat', { // Endpoint hipot√©tico, verificar documentaci√≥n oficial
    params: {
      query: q,
      context: prompt // 'context' o 'system_prompt' o similar
    },
    // headers: { 'Authorization': `Bearer TU_API_KEY_PERPLEXITY` } // Si requiere auth
  });
  if (!data || !data.response) throw new Error('Respuesta inv√°lida de Perplexity API');
  return data.response;
}

handler.help = ['ask <pregunta>', 'ia <pregunta> (Consulta a la IA con m√∫ltiples fuentes)'];
handler.command = ['ask', 'preguntar', 'xex']; // Mantener 'xex' por si se usa, pero 'ask' es m√°s gen√©rico
handler.tags = ['ia', 'tools'];
handler.register = true; // Recomendado
handler.limit = true;    // Recomendado por uso de APIs

export default handler;